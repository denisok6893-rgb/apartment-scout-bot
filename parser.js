const axios = require('axios');
const cheerio = require('cheerio');

class ApartmentParser {
  
  async parseAvito() {
    try {
      // –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      return [
        {
          title: "–°—Ç—É–¥–∏—è, 25 –º¬≤",
          price: "22 000 —Ä—É–±/–º–µ—Å",
          address: "–°–∏–º—Ñ–µ—Ä–æ–ø–æ–ª—å, —Ü–µ–Ω—Ç—Ä",
          link: "https://avito.ru",
          source: "Avito"
        },
        {
          title: "1-–∫–æ–º–Ω. –∫–≤–∞—Ä—Ç–∏—Ä–∞, 38 –º¬≤",
          price: "25 000 —Ä—É–±/–º–µ—Å", 
          address: "–°–∏–º—Ñ–µ—Ä–æ–ø–æ–ª—å, —É–ª. –ö–∏–µ–≤—Å–∫–∞—è",
          link: "https://avito.ru",
          source: "Avito"
        }
      ];
    } catch (error) {
      console.log('–û—à–∏–±–∫–∞ Avito:', error.message);
      return this.getMockData();
    }
  }

  async parseCian() {
    try {
      // –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
      return [
        {
          title: "2-–∫–æ–º–Ω. –∫–≤–∞—Ä—Ç–∏—Ä–∞, 45 –º¬≤",
          price: "28 000 —Ä—É–±/–º–µ—Å",
          address: "–°–∏–º—Ñ–µ—Ä–æ–ø–æ–ª—å, –∂/–º –ú–æ—Å–∫–≤–æ–π",
          link: "https://cian.ru",
          source: "–¶–ò–ê–ù"
        },
        {
          title: "3-–∫–æ–º–Ω. –∫–≤–∞—Ä—Ç–∏—Ä–∞, 65 –º¬≤",
          price: "35 000 —Ä—É–±/–º–µ—Å",
          address: "–°–∏–º—Ñ–µ—Ä–æ–ø–æ–ª—å, —É–ª. Gagarin",
          link: "https://cian.ru", 
          source: "–¶–ò–ê–ù"
        }
      ];
    } catch (error) {
      console.log('–û—à–∏–±–∫–∞ –¶–ò–ê–ù:', error.message);
      return this.getMockData();
    }
  }

  getMockData() {
    return [
      {
        title: "–ö–≤–∞—Ä—Ç–∏—Ä–∞ –≤ –°–∏–º—Ñ–µ—Ä–æ–ø–æ–ª–µ",
        price: "–æ—Ç 20 000 —Ä—É–±/–º–µ—Å",
        address: "–°–∏–º—Ñ–µ—Ä–æ–ø–æ–ª—å",
        link: "https://avito.ru",
        source: "Avito"
      }
    ];
  }

  async searchApartments(area = '—Å–∏–º—Ñ–µ—Ä–æ–ø–æ–ª—å') {
    try {
      console.log(`üîç –ò—â–µ–º –∫–≤–∞—Ä—Ç–∏—Ä—ã –≤ ${area}...`);
      
      const [avitoResults, cianResults] = await Promise.all([
        this.parseAvito(),
        this.parseCian()
      ]);
      
      const allResults = [...avitoResults, ...cianResults];
      
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${allResults.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`);
      return allResults;
      
    } catch (error) {
      console.log('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
      return this.getMockData();
    }
  }
}

module.exports = ApartmentParser;
